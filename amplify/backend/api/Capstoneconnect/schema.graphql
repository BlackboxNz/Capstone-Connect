type Tags @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  Name: String
  IsAward: Boolean
  Projects: [Project] @manyToMany(relationName: "TagsProject")
}

type Team @model @auth(rules: [{allow: public}]) {
  id: ID!
  Users: [User] @hasMany(indexName: "byTeam", fields: ["id"])
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  Email: String
  Password: String
  FirstName: String
  LastName: String
  LikedProjects: [Project] @manyToMany(relationName: "UserProject")
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  teamID: ID! @index(name: "byTeam")
}

type Project @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}, {allow: groups, groups: ["Student"], operations: [read, update]}, {allow: groups, groups: ["Visitor"], operations: [read]}, {allow: owner}]) {
  id: ID!
  TeamName: String!
  ProjectName: String!
  Description: String
  Brief: String
  Tag: [String]
  Image: String
  Video: String
  Comments: [Comment] @hasMany(indexName: "byProject", fields: ["id"])
  users: [User] @manyToMany(relationName: "UserProject")
  tagss: [Tags] @manyToMany(relationName: "TagsProject")
}

type Comment @model @auth(rules: [{allow: public}, {allow: owner}]) {
  id: ID!
  content: String!
  projectID: ID! @index(name: "byProject")
  userID: ID! @index(name: "byUser")
}
 